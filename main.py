import pylatex as pyl
from pylatex import Document, Command, NoEscape, Section, Subsection
import os
import json
import markdown
import bs4



META_DIR = 'curriculum/challenges/_meta/'
COURSE_DIR = 'curriculum/challenges/english/'


class NotesDocument(Document):

    def __init__(self, title='',  *args, **kwargs):
        super().__init__(*args, **kwargs)


        self.title = 'Bonk this is a title'
        self.title =title

        self.preamble.append(Command('title', f'{self.title} Notes'))
        self.preamble.append(Command('author', 'Patrick Adams'))
        self.preamble.append(Command('date', NoEscape(r'\today')))
        self.append(NoEscape(r'\maketitle'))



#     def make_section(self,title, cont):
        # with self.create(Section(title)):
            # self.append(cont)

    # def make_subsection(self, title, cont):
        # with self.create(Subsection(title)):
            # self.append(cont)








class Challenge:
    '''
    A single task to be completed.
    '''

    def __init__(self, name, block, course):
        self.name = name
        self.block = block
        self.course = course

        with open(self.get_mdfile_path(), 'r') as mdfile:
            self.markdown = markdown.markdown(mdfile.read())

        soup = bs4.BeautifulSoup(self.markdown, features='html.parser')

        description = soup.find(id='description')
        if description is not None:
            self.description = description.get_text()
            self.description = self.description.replace('\n\n', '\n')
            self.description = self.description.replace('\n\n', '\n')
            if self.description[0] == '\n':
                self.description = self.description[1:]
            self.description = self.description.replace('\u2194', '<->')


        else:
            self.description = ''

        instructions = soup.find(id='instructions')
        if instructions is not None:
            self.instructions = instructions.get_text()
        else:
            self.instructions = ''

        challengeSeed= soup.find(id='challengeSeed')#.get_text()
        if challengeSeed is not None:
            self.challengeSeed = challengeSeed
        else:
            self.challengeSeed = ''

        solution= soup.find(id='solution')#.get_text()
        if solution is not None:
            self.solution = solution
        else:
            self.solution = ''


    def get_mdfile_path(self):
        return f'{COURSE_DIR}{self.course}/{self.block}/{self.name}.md'





def generate_course_outlines():

    course_names = os.listdir(COURSE_DIR)
    block_names = os.listdir(META_DIR)



    courses = {}

    for course in course_names:
        course_blocks = os.listdir(COURSE_DIR+course)
        courses[course] = {}
        for block in course_blocks:
            courses[course][block] = {
                                            'challenges':[],
                                         }




    for block in block_names:
        with open(f'{META_DIR}{block}/meta.json', 'r') as metafile:
            meta_json = json.load(metafile)

        course = meta_json['superBlock']
        block_index = meta_json['order']
        block_name = meta_json['name']

        challenges = []
        for challenge in meta_json['challengeOrder']:
            challenges.append({
                                'title': challenge[1],
                                'obj': Challenge(unpretty(challenge[1]), block, course)
                                })


        courses[course][block]['challenges'] = challenges
        courses[course][block]['order'] = block_index

    return courses


def pretty(slug):
    ls = slug.split('-')
    pretty_str = ''
    for sub in ls:
        pretty_str +=sub.capitalize() + ' '
    return pretty_str[:-1]


def unpretty(phrase):
    phrase = phrase.lower()
    phrase = phrase.replace(' ', '-')

    banned = ['@', '\'','&', '(', ')', '+',',', ':', '*', '?', '/', chr(8217), chr(8216)]
    for i in banned:
        phrase = phrase.replace(i, '')

    phrase = phrase.replace('_', '-')
    phrase = phrase.replace('--', '-')
    phrase = phrase.replace('--', '-')
    return phrase









if __name__ == '__main__':



    courses = generate_course_outlines()





    course = 'responsive-web-design'
    course = 'javascript-algorithms-and-data-structures'


    geom = {
        'margin':'2.5cm'

    }

    for course in courses.keys():

        doc = NotesDocument(title=f'{pretty(course)}', default_filepath=f'{course}',
                            documentclass='article', geometry_options=geom)


        doc.append(Command('newpage'))
        doc.append('Note: This is a draft copy of notes generated by free code camp.\n')
        doc.append('https://www.freecodecamp.org/')
        doc.append(Command('newpage'))


        doc.append(Command('tableofcontents'))

        block_ordering = []
        for block in courses[course].keys():
            block_ordering.append([ courses[course][block]['order'], block])


        block_ordering.sort(key=lambda x: x[0])


        for block in block_ordering:

            with doc.create(Section(pretty(block[1]))):

                for challenge in courses[course][block[1]]['challenges']:
                    with doc.create(Subsection(challenge['title'])):
                        doc.append(challenge['obj'].description)

            doc.append(Command('newpage'))






        doc.generate_pdf(clean_tex=False)
        doc.generate_tex()




